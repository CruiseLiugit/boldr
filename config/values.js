/**
 * Application Configuration Values.
 *
 * DO NOT IMPORT THIS INTO YOUR CODE! RATHER USE THE `get` HELPER FUNCTION
 * THAT SITS NEXT TO THIS FILE.
 *
 * e.g.
 *   import getConfig from '../config';
 *   console.log(getConfig('welcomeMessage'));
 *
 * Note: all file/folder paths should be relative to the project root. The
 * absolute paths should be resolved during runtime by our build internal/server.
 */

import * as EnvVars from './EnvVars';

const values = {
  clientConfigFilter: {
    serviceWorker: {
      enabled: true,
    },
    polyfillIO: true,
    htmlPage: true,
    token: {
      key: true,
    },
    host: true,
    port: true,
    apiPrefix: true,
  },

  // The host on which the server should run.
  host: EnvVars.string('HOST', 'localhost'),
  // The port on which the server should run.
  port: EnvVars.number('PORT', 3000),
  // The port on which the client bundle development server should run.
  hmrPort: EnvVars.number('HMR_PORT', 3001),
  apiPrefix: '/api/v1',
  postgres: {
    name: 'boldr',
    host: EnvVars.string('POSTGRES_HOST', 'localhost'),
    user: EnvVars.string('POSTGRES_USER', 'postgres'),
    password: EnvVars.string('POSTGRES_PASSWORD', 'password'),
    uri: EnvVars.string('POSTGRES_CONN_URI', 'postgres://postgres:password@localhost:5432/boldr'),
    pool: {
      min: 2,
      max: 10,
    },
  },
  redis: {
    uri: EnvVars.string('REDIS_CONN_URI', 'redis://127.0.0.1:6379/1'),
  },
  saltRounds: 10,
  token: {
    key: 'jwt',
    secret: EnvVars.string('TOKEN_SECRET', 'b0ldrs0s3cr3t'),
    expiration: 60 * 60 * 24, // 1 day
  },
  mail: {
    host: EnvVars.string('MAIL_HOST', ''),
    user: EnvVars.string('MAIL_USER', 'admin@boldr.io'),
    password: EnvVars.string('MAIL_PASSWORD', ''),
    port: 465,
    ssl: true,
    domain: 'boldr.io',
    from: 'boldr@boldr.io',
  },
  logger: {
    console: true,
    file: false,
  },
  body: {
    limit: '20mb',
  },
  // Disable server side rendering?
  disableSSR: false,
  // How long should we set the browser cache for the served assets?
  // @see https://www.npmjs.com/package/ms
  cacheMaxAge: '365d',
  // We use the polyfill.io service which provides the polyfills that a
  // client needs, which is far more optimal than the large output
  // generated by babel-polyfill.
  polyfillIO: {
    enabled: true,
    url: 'https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Symbol',
  },
  // Configuration for the HTML pages (headers/titles/scripts/css/etc).
  // We make use of react-helmet to consume the values below.
  // @see https://github.com/nfl/react-helmet
  htmlPage: {
    titleTemplate: '%s - Powered by Boldr',
    defaultTitle: 'Boldr',
    description: "Your dreams are bold. Your thoughts are bold. So why shouldn't your CMS be a little Boldr?",
  },
  // Path to the public assets that will be served off the root of the HTTP server.
  publicAssetsPath: './public',

  /**
   * 🚷  MODIFICATION BELOW NOT RECOMMENDED ❗
   * unless you're very familiar with the innerworkings of Webpack.
   */
  // Where does our build output live?
  buildOutputPath: './boldrCMS',
  // Should we optimize production builds (i.e. minify etc).
  optimizeProdBuild: true,
  // Do you want to included source maps (will be served as seperate files) for production builds?
  incSourceMaps: false,

  // These extensions are tried when resolving src files for our bundles..
  bundleSrcTypes: ['js', 'jsx', 'json'],
  bundleAssetTypes: ['jpg', 'jpeg', 'png', 'gif', 'ico', 'eot', 'svg', 'ttf', 'woff', 'woff2', 'otf'],

  // What should we name the json output file that webpack generates
  // containing details of all output files for a bundle?
  bundleAssetsFileName: 'assets.json',

  // node_modules are not included in any bundles that target "node" as a
  // runtime (e.g.. the server bundle) as including them often breaks builds
  // due to thinks like require statements containing expressions..
  // However. some of the modules contain files need to be processed by
  // one of our Webpack loaders (e.g. CSS). Add any file types to the list
  // below to allow them to be processed by Webpack.
  extWhitelist: [
    /\.(eot|woff|woff2|ttf|otf)$/,
    /\.(svg|png|jpg|jpeg|gif|ico)$/,
    /\.(mp4|mp3|ogg|swf|webp)$/,
    /\.(css|scss|sass|sss|less)$/,
  ],

  // Note: you can only have a single service worker instance.  Our service
  // worker implementation is bound to the "client" and "server" bundles.
  // It includes the "client" bundle assets, as well as the public folder assets,
  // and it is served by the "server" bundle.
  serviceWorker: {
    // Enabled?
    enabled: true,
    // Service worker name
    fileName: 'sw.js',
    // Paths to the public assets which should be included within our
    // service worker. Relative to our public folder path, and accepts glob
    // syntax.
    includePublicAssets: [
      // NOTE: This will include ALL of our public folder assets.
      './**/*',
    ],
    // Path to the template used by HtmlWebpackPlugin to generate an offline
    // page that will be used by the service worker to render our application
    // offline.
    offlinePageTemplate: './internal/webpack/offlinePageTemplate.js',
    // Offline page file name.
    offlinePageFileName: 'offline.html',
  },

  bundles: {
    client: {
      // Src entry file.
      entryFile: './src/client/index.js',
      // Src paths.
      // @NOTE Mainly for the SW
      srcPaths: ['./src/client', './src/shared', './config'],
      // Where does the client bundle output live?
      outputPath: './boldrCMS/client',
      // What is the public http path at which we must serve the bundle from?
      webPath: '/client/',
      devDlls: {
        enabled: true,
        // Specify any dependencies that you would like to include in the Vendor DLL.
        include: [
          'react',
          'react-dom',
          'react-helmet',
          'react-router',
          'redux',
          'react-redux',
          'redux-thunk',
          'react-md',
          'draft-js',
          'bluebird',
          'superagent',
          'draft-js-export-html',
          'draft-js-import-html',
          'humps',
          'normalizr',
          'react-addons-css-transition-group',
          'react-addons-transition-group',
          'redux-form',
          'reselect',
          'serialize-javascript',
          'styled-components',
          'webfontloader',
        ],
        name: '__dev_vendor_dll__',
      },
    },
    server: {
      entryFile: './src/server/index.js',
      // Src paths.
      // @NOTE Mainly for the SW
      srcPaths: ['./src/server', './src/shared', './config'],
      outputPath: './boldrCMS/server',
    },
  },

  additionalNodeBundles: {},
  plugins: {
    // This plugin allows you to provide final adjustments your babel
    // configurations for each bundle before they get processed.
    babelConfig: (babelConfig, buildOptions) => {
      // eslint-disable-next-line no-unused-vars
      const { target, mode } = buildOptions;
      return babelConfig;
    },
    webpackConfig: (webpackConfig, buildOptions) => {
      // eslint-disable-next-line no-unused-vars
      const { target, mode } = buildOptions;
      return webpackConfig;
    },
  },
};

// This protects us from accidentally including this configuration in our
// client bundle. That would be a big NO NO to do. :)
if (process.env.BUILD_FLAG_IS_CLIENT) {
  throw new Error(
    'Avoid including the values file itself. This will bundle your secrets with your app.',
  );
}

export default values;
