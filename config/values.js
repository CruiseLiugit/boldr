/**
 * Application Configuration Values.
 *
 * DO NOT IMPORT THIS INTO YOUR CODE! RATHER USE THE `get` HELPER FUNCTION
 * THAT SITS NEXT TO THIS FILE.
 *
 * e.g.
 *   import getConfig from '../config';
 *   console.log(getConfig('welcomeMessage'));
 *
 * Note: all file/folder paths should be relative to the project root. The
 * absolute paths should be resolved during runtime by our build internal/server.
 */

import * as EnvVars from './EnvVars';

const values = {
  // The configuration values that should be exposed to our client bundle.
  // This value gets passed through the /shared/utils/objects/filterWithRules
  // util to create a filter object that can be serialised and included
  // with our client bundle.
  clientConfigFilter: {
    welcomeMessage: false,
    serviceWorker: {
      enabled: true,
    },
    polyfillIO: true,
    htmlPage: true,
  },

  // The host on which the server should run.
  host: EnvVars.string('HOST', 'localhost'),
  // The port on which the server should run.
  port: EnvVars.number('PORT', 3000),
  // The port on which the client bundle development server should run.
  clientDevServerPort: EnvVars.number('CLIENT_DEV_PORT', 3001),
  apiPrefix: '/api/v1',
  // This is an example environment variable which is consumed within the
  // './client.js' config.  See there for more details.
  welcomeMessage: EnvVars.string('WELCOME_MSG', 'Hello world!'),
  postgres: {
    name: 'boldr',
    host: EnvVars.string('POSTGRES_HOST', 'localhost'),
    user: EnvVars.string('POSTGRES_USER', 'postgres'),
    password: EnvVars.string('POSTGRES_PASSWORD', 'password'),
    uri: EnvVars.string('POSTGRES_CONN_URI', 'postgres://postgres:password@localhost:5432/boldr'),
    pool: {
      min: 2,
      max: 10,
    },
  },
  redis: {
    uri: EnvVars.string('REDIS_CONN_URI', 'redis://127.0.0.1:6379/1'),
  },
  privateKey: null,
  publicKey: null,
  saltRounds: 10,
  token: {
    secret: EnvVars.string('TOKEN_SECRET', 'b0ldrs0s3cr3t'),
    expiration: 60 * 60 * 24, // 1 day
  },
  mail: {
    host: EnvVars.string('MAIL_HOST', ''),
    user: EnvVars.string('MAIL_USER', 'admin@boldr.io'),
    password: EnvVars.string('MAIL_PASSWORD', ''),
    port: 465,
    ssl: true,
    domain: 'boldr.io',
    from: 'boldr@boldr.io',
  },
  logger: {
    console: true,
    file: false,
  },
  body: {
    limit: '20mb',
  },
  // Disable server side rendering?
  disableSSR: false,

  // How long should we set the browser cache for the served assets?
  // Don't worry, we add hashes to the files, so if they change the new files
  // will be served to browsers.
  // We are using the "ms" format to set the length.
  // @see https://www.npmjs.com/package/ms
  browserCacheMaxAge: '365d',

  // We use the polyfill.io service which provides the polyfills that a
  // client needs, which is far more optimal than the large output
  // generated by babel-polyfill.
  // Note: we have to keep this seperate from our "htmlPage" configuration
  // as the polyfill needs to be loaded BEFORE any of our other javascript
  // gets parsed.
  polyfillIO: {
    enabled: true,
    // Reference https://qa.polyfill.io/v2/docs/features for a full list
    // of features. We need to register Symbol as this is required by the
    // "transform-react-inline-elements" Babel plugin.
    url: 'https://cdn.polyfill.io/v2/polyfill.min.js?features=Symbol',
  },

  // Configuration for the HTML pages (headers/titles/scripts/css/etc).
  // We make use of react-helmet to consume the values below.
  // @see https://github.com/nfl/react-helmet
  htmlPage: {
    titleTemplate: '%s - Powered by Boldr',
    defaultTitle: 'Boldr',
    description: 'Your dreams are bold. Your thoughts are bold. So why shouldn\'t your CMS be a little Boldr?',
  },

  // Extended configuration for the Content Security Policy (CSP)
  // @see src/server/middleware/security for more info.
  cspExtensions: {
    childSrc: [],
    connectSrc: [],
    defaultSrc: [],
    fontSrc: [],
    imgSrc: [],
    mediaSrc: [],
    manifestSrc: [],
    objectSrc: [],
    scriptSrc: [],
    styleSrc: [],
  },

  // Path to the public assets that will be served off the root of the
  // HTTP server.
  publicAssetsPath: './public',

  // Where does our build output live?
  buildOutputPath: './boldrCMS',

  // Should we optimize production builds (i.e. minify etc).
  // Sometimes you don't want this to happen to aid in debugging complex
  // problems.  Having this configuration flag here allows you to quickly
  // toggle the feature.
  optimizeProductionBuilds: true,

  // Do you want to included source maps (will be served as seperate files)
  // for production builds?
  includeSourceMapsForOptimisedClientBundle: false,

  // These extensions are tried when resolving src files for our bundles..
  bundleSrcTypes: ['js', 'jsx', 'json'],

  // Additional asset types to be supported for our bundles.
  // i.e. you can import the following file types within your source and the
  // webpack bundling process will bundle them with your source and create
  // URLs for them that can be resolved at runtime.
  bundleAssetTypes: [
    'jpg',
    'jpeg',
    'png',
    'gif',
    'ico',
    'eot',
    'svg',
    'ttf',
    'woff',
    'woff2',
    'otf',
  ],

  // What should we name the json output file that webpack generates
  // containing details of all output files for a bundle?
  bundleAssetsFileName: 'assets.json',

  // node_modules are not included in any bundles that target "node" as a
  // runtime (e.g.. the server bundle) as including them often breaks builds
  // due to thinks like require statements containing expressions..
  // However. some of the modules contain files need to be processed by
  // one of our Webpack loaders (e.g. CSS). Add any file types to the list
  // below to allow them to be processed by Webpack.
  nodeExternalsFileTypeWhitelist: [
    /\.(eot|woff|woff2|ttf|otf)$/,
    /\.(svg|png|jpg|jpeg|gif|ico)$/,
    /\.(mp4|mp3|ogg|swf|webp)$/,
    /\.(css|scss|sass|sss|less)$/,
  ],

  // Note: you can only have a single service worker instance.  Our service
  // worker implementation is bound to the "client" and "server" bundles.
  // It includes the "client" bundle assets, as well as the public folder assets,
  // and it is served by the "server" bundle.
  serviceWorker: {
    // Enabled?
    enabled: true,
    // Service worker name
    fileName: 'sw.js',
    // Paths to the public assets which should be included within our
    // service worker. Relative to our public folder path, and accepts glob
    // syntax.
    includePublicAssets: [
      // NOTE: This will include ALL of our public folder assets.  We do
      // a glob pull of them and then map them to /foo paths as all the
      // public folder assets get served off the root of our application.
      // You may or may not want to be including these assets.  Feel free
      // to remove this or instead include only a very specific set of
      // assets.
      './**/*',
    ],
    // Path to the template used by HtmlWebpackPlugin to generate an offline
    // page that will be used by the service worker to render our application
    // offline.
    offlinePageTemplate: './internal/webpack/offlinePageTemplate.js',
    // Offline page file name.
    offlinePageFileName: 'offline.html',
  },

  bundles: {
    client: {
      // Src entry file.
      srcEntryFile: './client/index.js',

      // Src paths.
      srcPaths: [
        './client',
        './shared',
        // The service worker offline page generation needs access to the
        // config folder.  Don't worry we have guards within the config files
        // to ensure they never get included in a client bundle.
        './config',
      ],

      // Where does the client bundle output live?
      outputPath: './boldrCMS/client',

      // What is the public http path at which we must serve the bundle from?
      webPath: '/client/',

      // Configuration settings for the development vendor DLL.  This will be created
      // by our development server and provides an improved dev experience
      // by decreasing the number of modules that webpack needs to process
      // for every rebuild of our client bundle.  It by default uses the
      // dependencies configured in package.json however you can customise
      // which of these dependencies are excluded, whilst also being able to
      // specify the inclusion of additional modules below.
      devVendorDLL: {
        // Enabled?
        enabled: true,

        // Specify any dependencies that you would like to include in the
        // Vendor DLL.
        //
        // NOTE: It is also possible that some modules require specific
        // webpack loaders in order to be processed (e.g. CSS/SASS etc).
        // For these cases you don't want to include them in the Vendor DLL.
        include: [
          'react',
          'react-dom',
          'react-helmet',
          'react-router',
          'redux',
          'react-redux',
          'redux-thunk',
          'react-md',
          'draft-js',
          'bluebird',
          'superagent',
          'draft-js-export-html',
          'draft-js-import-html',
          'humps',
          'normalizr',
          'react-addons-css-transition-group',
          'react-addons-transition-group',
          'redux-form',
          'reselect',
          'serialize-javascript',
          'styled-components',
          'webfontloader',
        ],

        // The name of the vendor DLL.
        name: '__dev_vendor_dll__',
      },
    },

    server: {
      // Src entry file.
      srcEntryFile: './server/index.js',

      // Src paths.
      srcPaths: [
        './server',
        './shared',
        './config',
      ],

      // Where does the server bundle output live?
      outputPath: './boldrCMS/server',
    },
  },

  additionalNodeBundles: {},

  // These plugin definitions provide you with advanced hooks into customising
  // the project without having to reach into the internals of the tools.
  //
  // We have decided to create this plugin approach so that you can come to
  // a centralised configuration folder to do most of your application
  // configuration adjustments.  Additionally it helps to make merging
  // from the origin starter kit a bit easier.
  plugins: {
    // This plugin allows you to provide final adjustments your babel
    // configurations for each bundle before they get processed.
    //
    // This function will be called once for each for your bundles.  It will be
    // provided the current webpack config, as well as the buildOptions which
    // detail which bundle and mode is being targetted for the current function run.
    babelConfig: (babelConfig, buildOptions) => {
      // eslint-disable-next-line no-unused-vars
      const { target, mode } = buildOptions;

      // Example
      /*
       if (target === 'server' && mode === 'development') {
       babelConfig.presets.push('foo');
       }
       */

      return babelConfig;
    },

    // This plugin allows you to provide final adjustments your webpack
    // configurations for each bundle before they get processed.
    //
    // I would recommend looking at the "webpack-merge" module to help you with
    // merging modifications to each config.
    //
    // This function will be called once for each for your bundles.  It will be
    // provided the current webpack config, as well as the buildOptions which
    // detail which bundle and mode is being targetted for the current function run.
    webpackConfig: (webpackConfig, buildOptions) => {
      // eslint-disable-next-line no-unused-vars
      const { target, mode } = buildOptions;

      // Example:
      /*
       if (target === 'server' && mode === 'development') {
       webpackConfig.plugins.push(new MyCoolWebpackPlugin());
       }
       */

      // Debugging/Logging Example:
      /*
       if (target === 'server') {
       console.log(JSON.stringify(webpackConfig, null, 4));
       }
       */

      return webpackConfig;
    },
  },
};

// This protects us from accidentally including this configuration in our
// client bundle. That would be a big NO NO to do. :)
if (process.env.BUILD_FLAG_IS_CLIENT) {
  throw new Error("You shouldn't be importing the `<projectroot>/config` directly into code that will be included in your 'client' bundle as the configuration object will then get included in your client bundle. Not a safe move! Instead, use the `getConfig` helper function located at `<projectroot>/config/get`.");
}

export default values;
